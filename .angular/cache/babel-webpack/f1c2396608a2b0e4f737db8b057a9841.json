{"ast":null,"code":"import { ProductActionTypes, LoadProductsSuccess, LoadProductsFail, UpdateProductSuccess, UpdateProductFail, CreateProductFail, CreateProductSuccess, DeleteProductFail, DeleteProductSuccess } from './product.actions';\nimport { ofType, createEffect } from '@ngrx/effects';\nimport { mergeMap, map, catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"./../product.service\";\nexport let ProductEffects = /*#__PURE__*/(() => {\n  class ProductEffects {\n    constructor(actions$, productService) {\n      this.actions$ = actions$;\n      this.productService = productService;\n      this.LoadProducts$ = createEffect(() => this.actions$.pipe(ofType(ProductActionTypes.LoadProducts), mergeMap(action => this.productService.getProducts().pipe(map(products => new LoadProductsSuccess(products)), catchError(err => of(new LoadProductsFail(err)))))));\n      this.UpdateProduct$ = createEffect(() => this.actions$.pipe(ofType(ProductActionTypes.UpdateProduct), map(action => action.payload), mergeMap(product => this.productService.updateProduct(product).pipe(map(product => new UpdateProductSuccess(product)), catchError(err => of(new UpdateProductFail(err)))))));\n      this.CreateProduct$ = createEffect(() => this.actions$.pipe(ofType(ProductActionTypes.CreateProduct), map(action => action.payload), mergeMap(product => this.productService.createProduct(product).pipe(map(product => new CreateProductSuccess(product)), catchError(err => of(new CreateProductFail(err)))))));\n      this.DeleteProduct$ = createEffect(() => this.actions$.pipe(ofType(ProductActionTypes.DeleteProduct), map(action => action.payload), mergeMap(product => this.productService.deleteProduct(product.id).pipe(map(productId => new DeleteProductSuccess(productId)), catchError(err => of(new DeleteProductFail(err)))))));\n    }\n\n  }\n\n  ProductEffects.ɵfac = function ProductEffects_Factory(t) {\n    return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n  };\n\n  ProductEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductEffects,\n    factory: ProductEffects.ɵfac\n  });\n  return ProductEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}