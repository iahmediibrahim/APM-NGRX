{"ast":null,"code":"import { ProductActionTypes } from './product.actions';\nimport { createFeatureSelector, createSelector } from '@ngrx/store'; // identifying the initial state of products\n\nconst initialState = {\n  showProductCode: true,\n  currentProductId: null,\n  products: [],\n  error: ''\n};\nconst defaultProduct = {\n  id: 0,\n  productName: '',\n  productCode: '',\n  description: '',\n  starRating: 0\n}; // create the main feature selector\n\nconst getProductFeatureState = createFeatureSelector('products'); // create the selectors needed for each slice of the state of products needed individually\n\nexport const getShowProductCode = createSelector(getProductFeatureState, state => state.showProductCode);\nexport const getCurrentProductId = createSelector(getProductFeatureState, state => state.currentProductId);\nexport const getCurrentProduct = createSelector(getProductFeatureState, getCurrentProductId, (state, currentProductId) => {\n  if (currentProductId === 0) {\n    return defaultProduct;\n  } else {\n    return currentProductId ? state.products.find(p => p.id === currentProductId) : null;\n  }\n});\nexport const getProducts = createSelector(getProductFeatureState, state => state.products);\nexport const getError = createSelector(getProductFeatureState, state => state.error); // create the reducer function with strong typing by initial state and the interface of the return state\n\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ProductActionTypes.ToggleProductCode:\n      return Object.assign(Object.assign({}, state), {\n        showProductCode: action.payload\n      });\n\n    case ProductActionTypes.SetCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: action.payload.id\n      });\n\n    case ProductActionTypes.ClearCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: null\n      });\n\n    case ProductActionTypes.InitializeCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: 0\n      });\n\n    case ProductActionTypes.LoadProductsSuccess:\n      return Object.assign(Object.assign({}, state), {\n        products: action.payload,\n        error: ''\n      });\n\n    case ProductActionTypes.LoadProductsFail:\n      return Object.assign(Object.assign({}, state), {\n        products: [],\n        error: action.payload\n      });\n\n    case ProductActionTypes.UpdateProductSuccess:\n      const products = state.products.map(product => product.id === action.payload.id ? action.payload : product);\n      return Object.assign(Object.assign({}, state), {\n        products,\n        currentProductId: action.payload.id,\n        error: ''\n      });\n\n    case ProductActionTypes.UpdateProductFail:\n      return Object.assign(Object.assign({}, state), {\n        products: [],\n        error: action.payload\n      });\n\n    case ProductActionTypes.CreateProductSuccess:\n      const newProducts = [...products, action.payload];\n      return Object.assign(Object.assign({}, state), {\n        products: newProducts,\n        currentProductId: action.payload.id,\n        error: ''\n      });\n\n    case ProductActionTypes.CreateProductFail:\n      return Object.assign(Object.assign({}, state), {\n        error: action.payload\n      });\n\n    case ProductActionTypes.DeleteProductSuccess:\n      console.log(action.payload);\n      const updatedProducts = state.products.map(p => {\n        if (p.id !== action.payload.id) return p;\n      });\n      console.log([...updatedProducts]);\n      return Object.assign(Object.assign({}, state), {\n        products: [...updatedProducts],\n        currentProductId: 0,\n        error: ''\n      });\n\n    case ProductActionTypes.DeleteProductFail:\n      return Object.assign(Object.assign({}, state), {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}